// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// TranscriptClient is an autogenerated mock type for the TranscriptClient type
type TranscriptClient struct {
	mock.Mock
}

// Fetch provides a mock function with given fields: id, language
func (_m *TranscriptClient) Fetch(id string, language string) (string, error) {
	ret := _m.Called(id, language)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(id, language)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, language)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: id
func (_m *TranscriptClient) List(id string) ([]string, error) {
	ret := _m.Called(id)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: id, language, fileName
func (_m *TranscriptClient) Save(id string, language string, fileName string) error {
	ret := _m.Called(id, language, fileName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(id, language, fileName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
